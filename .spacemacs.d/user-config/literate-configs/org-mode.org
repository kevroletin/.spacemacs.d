#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

:DEPENDENCIES:
htmlize
:END:

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

** Org-Mode Hook -- Keybindings
   :PROPERTIES:
   :CUSTOM_ID: keybindings
   :END:
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\M-\C-n" 'outline-next-visible-heading)
              (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
              (local-set-key "\M-\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+end_src

** Speed keys
   :PROPERTIES:
   :CUSTOM_ID: speed-keys
   :END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src

** Code blocks
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp :tangle no
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)))
#+end_src

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp :tangle no
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

** The Library of Babel
   :PROPERTIES:
   :CUSTOM_ID: library-of-babel
   :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.

* User Org

** Own workflow

Org acutally uses this variable only under rare circumstances, like
when filing remember notes in an interactive way and prompting you for
an Org file to put the note into.
#+begin_src emacs-lisp
  (setq org-directory "~/org")
#+end_src

Agenda should be build from files listed below. Create missed files.
#+begin_src emacs-lisp
  (defun touch-file (filename)
    (with-temp-buffer (write-file filename)))

  (defun ensure-file-exists (filename)
    (unless (file-exists-p filename) (touch-file filename)))

  (let ((personal-org-files (list "~/org/gtd.org"
                                  "~/org/habits.org"
                                  "~/org/education.org"
                                  "~/org/work.org")))
    (dolist (it personal-org-files) (ensure-file-exists it)))
  (setq org-agenda-files (list "~/org/personal" "~/org/work"))

  (ensure-file-exists "~/org/archive.org")
#+end_src

Archive in file ~/org/archive.org (absolute path), under headlines
"From FILENAME" where file name is the current file name.
#+begin_src emacs-lisp
  (setq org-archive-location "~/org/archive.org::* From %s")
#+end_src

Configure "capture" feature for quick notes saving
#+begin_src emacs-lisp
  (setq org-default-notes-file "~/org/personal/refile.org")
#+end_src

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "(W) New task" entry (file "~/org/work/refile.org")
           "* NEW %?\n  %i\n")
          ("n" "(W) Note" entry (file "~/org/work/refile.org")
           "* %?\n  %i\n")
          ("T" "(H) New task" entry (file "~/org/personal/refile.org")
           "* NEW %?\n  %i\n")
          ("N" "(H) Note" entry (file "~/org/personal/refile.org")
           "* %?\n  %i\n")))
#+end_src

Enable habit tracking in Org-mode
#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit)
#+end_src

Clocking info will be wrapped into a drawer
#+begin_src emacs-lisp
  (setq org-clock-into-drawer t)
#+end_src

List of TODO entry keyword sequences and their interpretation. Symbols
in brackets define if setting status requires writing description.
#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEW(n)"  "|" "DONE(d@/!)")
              (sequence "WAITING(w@/!)" "MAYBE(h@/!)" "|" "CANCELLED(c@/!)"))))
#+end_src

Coloring have meaning. Red color disturbs me so NEW task are red -
they should be quickly performed or turned into green. TODO tasks are
green because green stimulates action. Other colors are random.
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      (quote (("TODO"      :foreground "green"  :weight bold)
              ("NEW"       :foreground "red"    :weight bold)
              ("DONE"      :foreground "gray"   :weight bold)
              ("WAITING"   :foreground "orange" :weight bold)
              ("MAYBE"     :foreground "yellow" :weight bold)
              ("CANCELLED" :foreground "gray"   :weight bold))))
#+end_src

Task with :prj: tag is a project. Tell org-mode how to detect stall
projects (i.e. projects without tasks).
#+begin_src emacs-lisp
  (setq org-tags-exclude-from-inheritance '("prj")
        org-stuck-projects '("+prj"
                             ("TODO" "NEW")))
#+end_src

** Send agenda to email

+ C-c m from agenda view sends it via email
  This function exports existing agenda buffer to html. Then it composes
  email and sends it. Email composition is tricky since it uses
  interactive functions to create email.
  #+begin_src emacs-lisp
    (defun sk-send-agenda ()
      (interactive)
      (require 'sk-email-agenda) ;; not-auto loads ^_^
      (sk-send-agenda-to-email "kevroletin@gmail.com"))

    (with-eval-after-load "org-agenda"
      (define-key org-agenda-mode-map (kbd "C-c m") #'sk-send-agenda))
#+end_src

** Flyspell customization

Indicate grammar mistakes using red wave underline (like in graphical
text editors).

Org mode loads custom configuration after all starter kit files. So
this is default values which you can override using custom interface.

Advice: to investigate font face under cursor use what-cursor-position
with a prefix argument /(keyboard shortcut is C-u C-x =)/.
#+begin_src emacs-lisp
(custom-set-faces
 '(flyspell-duplicate ((t (:underline (:color "dark orange" :style wave :inherit unspecified)))))
 '(flyspell-incorrect ((t (:underline (:color "red" :style wave :inherit unspecified))))))
#+end_src

Enable flyspell for org mode

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+end_src

** Appearance

Default color of outline-2 face same with default color in atom-dark
theme.
#+begin_src emacs-lisp
  (custom-set-faces
    '(outline-2 ((t (:foreground "#8AE234")))))
#+end_src

* Links

[1] http://juanreyero.com/article/emacs/org-teams.html
[2] http://doc.norang.ca/org-mode.html
[3] https://hamberg.no/gtd/
